#!/bin/bash -x
##############################################
# Written by Kosala Atapattu kosala@kosala.net
# All right reserved. Distributed under GPL v2,
# allowed to modify and redistribute, WETF.
##############################################

############ Configurables ###################

vault_path=~/vault
password_path=$vault_path/passwd
keystore_path=$vault_path/keystore

rsa_key_pub=$keystore_path/mykey.pub
rsa_key_priv=$keystore_path/mykey.pem

############ Do not change below this line ###

[ -d $keystore_path ] || mkdir -p $keystore_path

[ -d $password_path ] || mkdir -p $password_path

############ Set the Copy Command ############

case $(uname) in
Linux)
        COPY_CMD='xsel --clipboard --input'
        ;;
Darwin)
        COPY_CMD=pbcopy
        ;;
*)
        errormsg "ERROR: Unsupported OS!!"
        ;;
esac 

#############################################
genkeys () {
	[ -f $rsa_key_priv ] && {
		[ -f $rsa_key_pub ] || {
			openssl rsa -in $rsa_key_priv -pubout -out $rsa_key_pub
		}
	} || {
		printmsg "Please enter a passphrase to encrypt your key."
		openssl genrsa -aes256 -out $rsa_key_priv 2048 2>/dev/null 
		printmsg "Please enter the same passphrase to generate the public key."
		openssl rsa -in $rsa_key_priv -pubout -out $rsa_key_pub
	}
}

# this subroutine will sync the vault files with recovery commands.
syncvault () {
	for file in $password_path/*
	do 
		[ -L /usr/local/bin/readpass-${file} ] || {
			ln -s $0 /usr/local/bin/readpass-${file} 
		}
	done
}

importpubkey () {
	key=$1
	cp $1 $keystore_path/.
}

exportpubkey () {
	cp $rsa_pub_key ./$(uname -n)-${USER}.pub
	[ $? -eq 0 ] && {
		printmsg "Public key file created on $(uname -n)-${USER}.pub"
	}
}

listpubkey () {
	for file in $keystore_path/*
	do 
		echo $(basename $file | sed 's/^aux-//')
	done
}

transferkeysto () {
	key=$1
	for file in $keystore_path/*
	do 
		readfromvault ${file} | _encrypt $key > ${key}-${file}
	done
}

transferkeysfrom () {
	file=$1
	[ -f ${keystore_path}/${file} ] ||  cp $file $keystore_path/. && errormsg "Password already exisit."

	readfromvault $file 2>&1 >/dev/null
	[ $? -eq 0 ] || {
		deletefromvault $file
	}
}



printmsg () {
        echo -e "\033[32m$1\033[0m"
}

errormsg () {
        echo -e "\033[31m$1 \033[0m" 1>&2
}

usage () {
        printmsg "Usage: $0  add name"
        printmsg "Usage: $0  new name"
        printmsg "Usage: $0  delete name"
        printmsg "Usage: $0  list" 
        printmsg "Usage: $0  sync"
        printmsg "Usage: $0  share user"
        printmsg "Usage: $0  importkey file"
        printmsg "Usage: $0  exportkey"
        printmsg "Usage: $0  listkey"
        printmsg
        printmsg "To retrieve the password, type in the name [used in the above command] on the command prompt."
        printmsg
        printmsg
}

readpassword () {
	read -p "Enter the password: " -s passwd1
        echo
	[ -z $passwd1 ] && {
		errormsg "ERROR: password cannot be empty"
		exit
	}
        read -p "Repeat the password: " -s passwd2
        echo 

        [ "x$passwd1" == "x$passwd2" ] && {
		echo $passwd1
	} || {
		errormsg "ERROR: passwords do not match."
		exit
	}
}

newpassword () {
	openssl rand -base64 10 | cut -d"=" -f 1 
}

_encrypt () {
	[ -z $1 ] && key=$rsa_key_pub || key=$1

	read -e | openssl rsautl -encrypt -pubin -inkey $key | openssl base64 -e 
	[ $? -ne 0 ] && {
		printmsg "ERROR: Failed to add to the vault."
		exit
	} || {
		ln -s $0 /usr/local/bin/readpass-${vault_file} 2>&1 >/dev/null
	}
}

add2vault () {
	vault_file=$1
	passwd3=$2

	[ -z $passwd3 ] && exit

	[ -f $password_path/$vault_file ] && {
		errormsg "ERROR: A file already exist in the vault under the same name."
		exit
	}
	echo $passwd3 | _encrypt  > $password_path/$vault_file
}

deletefromvault () {
        vault_file=$1
        [ -f $password_path/$vault_file ] && {
                rm -fr $password_path/$vault_file 
                rm -fr /usr/local/bin/readpass-${vault_file}
        } || {
                errormsg "ERROR: file not fount in the vault."
                exit
        }
}

readfromvault () {
        vault_file=$1
        [ -f $password_path/$vault_file ] && {
                cat $password_path/$vault_file | openssl base64 -d | openssl rsautl -decrypt -inkey $rsa_key_priv 
        } || {
                errormsg "ERROR: unable to find file in the vault!!!"
                [ -x /usr/local/bin/$vault_file ] && {
                        printmsg "INFO: Removing the link file."
                        [ -L /usr/local/bin/$vault_file ] && rm -f /usr/local/bin/$vault_file
                        printmsg "INFO: File removed!!!."
                } || {
                        printmsg "INFO: Link file not faund."
                }
                exit
        }
}

listfromvault () {
        for file in $password_path/*
        do
                basename $file
        done
}

# generate the keys if they do not exists
genkeys

[ x$1 == "x" ] && {
        [ -L $0 ] && {
                oper=read
        } || {
                usage
                exit
        }
} || {
        oper=$1
	name=$2
}

case $oper in
add)
	[ -z $name ] && {
		errormsg "ERROR: $oper needs argument"
		usage
		exit;
	} || { 
		(add2vault $name $(readpassword))
	}
        ;;
new)	
	[ -z $name ] && {
		errormsg "ERROR: $oper needs argument"
		usage
		exit;
	} || {
		add2vault $name $(newpassword)
	}
        ;;
delete)
        [ -z $name ] && {
		errormsg "ERROR: $oper needs argument"
		usage
		exit;
	} || { 
		deletefromvault $name
	}
        ;;
read)
        readfromvault $(basename $0 | sed 's/^readpass-//') | $COPY_CMD
        ;;
list) 
        listfromvault
        ;;
share)
        [ -z $name ] && {
		errormsg "ERROR: $oper needs argument"
		usage
		exit;
	} || { 	
		transferkeysto $name
	}
	;;
importkey)
	[ -z $name ] && {
		errormsg "ERROR: $oper needs argument"
		usage
		exit;
	} || { 	
		importpubkey $name
	}
	;;
exportkey)
	exportpubkey
	;;
listkey)
	listpubkey
	;;
sync)
	syncvault
	;;	
*)
        usage
esac
